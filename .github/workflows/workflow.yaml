name: Build

on:
  - push
  - pull_request

env:
  GITHUB_WORKFLOW: true

jobs:
  test:
    name: Test and coverage
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        django:
          - 2.2
          - 3.0
          - 3.1
        database:
          - sqlite
          - mysql
          - postgres

    services:

      # postgres service
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # mysql service
      mysql:
        image: mysql:8
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install Django 2.2
        if: matrix.django == 2.2
        run: pip install "Django>=2.2,<3.0"
      - name: Install Django 3.0
        if: matrix.django == 3.0
        run: pip install "Django>=3.0,<3.1"
      - name: Install Django 3.1
        if: matrix.django == 3.1
        run: pip install "Django>=3.1,<3.2"
      - name: Install MySQL libs
        if: matrix.database == 'mysql'
        run: pip install mysqlclient>=2.0.1 django-mysql>=3.9.0
      - name: Install postgres libs
        if: matrix.database == 'postgres'
        run: pip install psycopg2>=2.8.6

      - name: Install requirements
        run: pip install -r requirements_test.txt

      - name: Install package
        run: pip install -e .

      - name: Run tests and coverage
        run: coverage run --source=django_scrubber runtests.py
        env:
          DATABASE_ENGINE: ${{ matrix.database }}

      - name: Publish coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: coveralls

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    name: Build and publish to PyPI
    needs: test
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install build packages
        run: python -m pip install -U setuptools wheel

      - name: Build a binary wheel and a source tarball
        run: python setup.py sdist bdist_wheel

      - name: Publish Package on Pypi
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_SECRET }}
